{"version":3,"sources":["components/GoJSWrapper.jsx","components/InspectorRow.jsx","components/SelectionInspector.jsx","App.jsx","index.js"],"names":["GoJSWrapper","props","_useState","useState","_useState2","Object","slicedToArray","observed","setObserved","diagramRef","useRef","useEffect","current","diagram","getDiagram","go","addDiagramListener","onDiagramChange","currentDiagram","removeDiagramListener","react_default","a","createElement","className","gojsreact","initPalette","$","make","divClassName","nodeDataArray","key","text","ref","initDiagram","roundedRectangleParams","parameter1","spot1","TopLeft","spot2","BottomRight","myDiagram","animationManager.initialAnimationStyle","None","InitialAnimationStarting","e","animation","subject","defaultAnimation","easing","EaseOutExpo","duration","add","toolManager.mouseWheelBehavior","WheelZoom","clickCreatingTool.archetypeNodeData","undoManager.isEnabled","positionComputation","pt","Math","floor","x","y","model","linkKeyProperty","button","document","getElementById","disabled","isModified","idx","title","indexOf","slice","nodeTemplate","locationSpot","Top","isShadowed","shadowBlur","shadowOffset","shadowColor","parse","makeTwoWay","stringify","color","name","fill","strokeWidth","stroke","portId","fromLinkable","fromLinkableSelfNode","fromLinkableDuplicates","toLinkable","toLinkableSelfNode","toLinkableDuplicates","cursor","font","margin","editable","selectionAdornmentTemplate","alignment","TopRight","click","obj","adornment","part","startTransaction","fromNode","adornedPart","fromData","data","toData","p","location","copy","loc","addNodeData","linkdata","from","getKeyForNodeData","to","addLinkData","newnode","findNodeForData","select","commitTransaction","scrollToRect","actualBounds","width","height","nodeTemplateMap","desiredSize","linkTemplate","curve","Bezier","adjusting","Stretch","reshapable","relinkableFrom","relinkableTo","toShortLength","progress","toArrow","0","0.7","1","textAlign","console","log","linkDataArray","modelData","onModelChange","skipsDiagramUpdate","initOverview","contentAlignment","Center","observedDiagram","InspectorRow","value","setValue","handleInputChange","onInputChange","id","target","type","val","locArr","split","length","parseFloat","isNaN","concat","toFixed","formatLocation","onChange","onBlur","SelectionInspector","react","selObj","selectedData","dets","k","row","components_InspectorRow","unshift","push","renderObjectDetails","App","canRelink","array","setArray","_useState3","_useState4","Inspector","setInspector","mapNodeKeyIdx","Map","mapLinkKeyIdx","refreshNodeIndex","nodeArr","clear","forEach","n","set","refreshLinkIndex","linkArr","l","useCallback","path","isBlur","produce","draft","get","undefined","inspector","src_components_SelectionInspector","href","rel","src_components_GoJSWrapper","sel","first","nd","ld","drop","alert","insertedNodeKeys","modifiedNodeData","removedNodeKeys","insertedLinkKeys","modifiedLinkData","removedLinkKeys","modifiedModelData","modifiedNodeMap","modifiedLinkMap","narr","filter","includes","larr","checked","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.f7d1d15c.chunk.js","sourcesContent":["/*\r\n *  Copyright (C) 1998-2019 by Northwoods Software Corporation. All Rights Reserved.\r\n */\r\n\r\nimport * as go from \"gojs\";\r\nimport { ReactDiagram, ReactOverview, ReactPalette } from \"gojs-react\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\n\r\nimport \"./GoJSWrapper.css\";\r\n\r\nconst GoJSWrapper = (props) => {\r\n  /** @internal */\r\n\r\n  const [observed, setObserved] = useState(null);\r\n  const diagramRef = useRef();\r\n\r\n  /**\r\n   * Get the diagram reference and add any desired diagram listeners.\r\n   * Typically the same function will be used for each listener, with the function using a switch statement to handle the events.\r\n   */\r\n\r\n  useEffect(() => {\r\n    if (!diagramRef.current) return;\r\n    const diagram = diagramRef.current.getDiagram(); // refs are up-to-date\r\n    if (diagram instanceof go.Diagram) {\r\n      setObserved(diagram);\r\n      diagram.addDiagramListener(\"ChangedSelection\", props.onDiagramChange);\r\n      diagram.addDiagramListener(\r\n        \"ExternalObjectsDropped\",\r\n        props.onDiagramChange\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Get the diagram reference and remove listeners that were added during mounting.\r\n     */\r\n    return () => {\r\n      if (diagramRef.current) return;\r\n      const currentDiagram = diagramRef.current.getDiagram();\r\n      if (currentDiagram instanceof go.Diagram) {\r\n        setObserved(null);\r\n        currentDiagram.removeDiagramListener(\r\n          \"ChangedSelection\",\r\n          props.onDiagramChange\r\n        );\r\n        currentDiagram.removeDiagramListener(\r\n          \"ExternalObjectsDropped\",\r\n          props.onDiagramChange\r\n        );\r\n      }\r\n    };\r\n  }, [diagramRef, props.onDiagramChange]);\r\n\r\n  /**\r\n   * Diagram initialization method, which is passed to the Diagram component.\r\n   * This method is responsible for making the diagram and initializing the model, any templates,\r\n   * and maybe doing other initialization tasks like customizing tools.\r\n   * The model's data should not be set here, as the Diagram component handles that.\r\n   */\r\n  const initDiagram = () => {\r\n    // Since 2.2 you can also author concise templates with method chaining instead of GraphObject.make\r\n    // For details, see https://gojs.net/latest/intro/buildingObjects.html\r\n    const $ = go.GraphObject.make; // for conciseness in defining templates\r\n\r\n    // some constants that will be reused within templates\r\n    let roundedRectangleParams = {\r\n      parameter1: 2, // set the rounded corner\r\n      spot1: go.Spot.TopLeft,\r\n      spot2: go.Spot.BottomRight // make content go all the way to inside edges of rounded corners\r\n    };\r\n\r\n    const addNodeAndLink = (e, obj) => {\r\n      var adornment = obj.part;\r\n      var diagram = e.diagram;\r\n      diagram.startTransaction(\"Add State\");\r\n\r\n      // get the node data for which the user clicked the button\r\n      var fromNode = adornment.adornedPart;\r\n      var fromData = fromNode.data;\r\n      // create a new \"State\" data object, positioned off to the right of the adorned Node\r\n      var toData = { text: \"new\" };\r\n      var p = fromNode.location.copy();\r\n      p.x += 200;\r\n      toData.loc = go.Point.stringify(p); // the \"loc\" property is a string, not a Point object\r\n      // add the new node data to the model\r\n      var model = diagram.model;\r\n      model.addNodeData(toData);\r\n\r\n      // create a link data from the old node data to the new node data\r\n      var linkdata = {\r\n        from: model.getKeyForNodeData(fromData), // or just: fromData.id\r\n        to: model.getKeyForNodeData(toData),\r\n        text: \"transition\"\r\n      };\r\n      // and add the link data to the model\r\n      model.addLinkData(linkdata);\r\n\r\n      // select the new Node\r\n      var newnode = diagram.findNodeForData(toData);\r\n      diagram.select(newnode);\r\n\r\n      diagram.commitTransaction(\"Add State\");\r\n\r\n      // if the new node is off-screen, scroll the diagram to show the new node\r\n      diagram.scrollToRect(newnode.actualBounds);\r\n    };\r\n\r\n    const myDiagram = $(go.Diagram, {\r\n      \"animationManager.initialAnimationStyle\": go.AnimationManager.None,\r\n      InitialAnimationStarting: (e) => {\r\n        var animation = e.subject.defaultAnimation;\r\n        animation.easing = go.Animation.EaseOutExpo;\r\n        animation.duration = 900;\r\n        animation.add(e.diagram, \"scale\", 0.1, 1);\r\n        animation.add(e.diagram, \"opacity\", 0, 1);\r\n      },\r\n\r\n      // have mouse wheel events zoom in and out instead of scroll up and down\r\n      \"toolManager.mouseWheelBehavior\": go.ToolManager.WheelZoom,\r\n      // support double-click in background creating a new node\r\n      \"clickCreatingTool.archetypeNodeData\": { text: \"new node\" },\r\n      // enable undo & redo\r\n      \"undoManager.isEnabled\": true,\r\n      positionComputation: function (diagram, pt) {\r\n        return new go.Point(Math.floor(pt.x), Math.floor(pt.y));\r\n      },\r\n      model: new go.GraphLinksModel({\r\n        linkKeyProperty: \"key\" // IMPORTANT! must be defined for merges and data sync when using GraphLinksModel\r\n      })\r\n    });\r\n\r\n    // when the document is modified, add a \"*\" to the title and enable the \"Save\" button\r\n    myDiagram.addDiagramListener(\"Modified\", function (e) {\r\n      var button = document.getElementById(\"SaveButton\");\r\n      if (button) button.disabled = !myDiagram.isModified;\r\n      var idx = document.title.indexOf(\"*\");\r\n      if (myDiagram.isModified) {\r\n        if (idx < 0) document.title += \"*\";\r\n      } else {\r\n        if (idx >= 0) document.title = document.title.slice(0, idx);\r\n      }\r\n    });\r\n\r\n    // define the Node template\r\n    myDiagram.nodeTemplate = $(\r\n      go.Node,\r\n      \"Auto\",\r\n      {\r\n        locationSpot: go.Spot.Top,\r\n        isShadowed: true,\r\n        shadowBlur: 1,\r\n        shadowOffset: new go.Point(0, 1),\r\n        shadowColor: \"rgba(0, 0, 0, .14)\"\r\n      },\r\n      new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n        go.Point.stringify\r\n      ),\r\n      // define the node's outer shape, which will surround the TextBlock\r\n      $(\r\n        go.Shape,\r\n        \"RoundedRectangle\",\r\n        new go.Binding(\"fill\", \"color\", (color) => (color ? color : \"#ffffff\")),\r\n        roundedRectangleParams,\r\n        {\r\n          name: \"SHAPE\",\r\n          fill: \"#ffffff\",\r\n          strokeWidth: 0,\r\n          stroke: null,\r\n          portId: \"\", // this Shape is the Node's port, not the whole Node\r\n          fromLinkable: true,\r\n          fromLinkableSelfNode: true,\r\n          fromLinkableDuplicates: true,\r\n          toLinkable: true,\r\n          toLinkableSelfNode: true,\r\n          toLinkableDuplicates: true,\r\n          cursor: \"pointer\"\r\n        }\r\n      ),\r\n      $(\r\n        go.TextBlock,\r\n        {\r\n          font: \"bold small-caps 11pt helvetica, bold arial, sans-serif\",\r\n          margin: 7,\r\n          stroke: \"rgba(0, 0, 0, .87)\",\r\n          editable: true // editing the text automatically updates the model data\r\n        },\r\n        new go.Binding(\"text\").makeTwoWay()\r\n      )\r\n    );\r\n\r\n    // unlike the normal selection Adornment, this one includes a Button\r\n    myDiagram.nodeTemplate.selectionAdornmentTemplate = $(\r\n      go.Adornment,\r\n      \"Spot\",\r\n      $(\r\n        go.Panel,\r\n        \"Auto\",\r\n        $(go.Shape, \"RoundedRectangle\", roundedRectangleParams, {\r\n          fill: null,\r\n          stroke: \"#7986cb\",\r\n          strokeWidth: 3\r\n        }),\r\n        $(go.Placeholder) // a Placeholder sizes itself to the selected Node\r\n      ),\r\n      // the button to create a \"next\" node, at the top-right corner\r\n      $(\r\n        \"Button\",\r\n        {\r\n          alignment: go.Spot.TopRight,\r\n          click: addNodeAndLink // this function is defined below\r\n        },\r\n        $(go.Shape, \"PlusLine\", { width: 6, height: 6 })\r\n      ) // end button\r\n    ); // end Adornment\r\n\r\n    myDiagram.nodeTemplateMap.add(\r\n      \"Start\",\r\n      $(\r\n        go.Node,\r\n        \"Spot\",\r\n        { desiredSize: new go.Size(75, 75) },\r\n        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n          go.Point.stringify\r\n        ),\r\n        $(go.Shape, \"Circle\", {\r\n          fill: \"#52ce60\" /* green */,\r\n          stroke: null,\r\n          portId: \"\",\r\n          fromLinkable: true,\r\n          fromLinkableSelfNode: true,\r\n          fromLinkableDuplicates: true,\r\n          toLinkable: true,\r\n          toLinkableSelfNode: true,\r\n          toLinkableDuplicates: true,\r\n          cursor: \"pointer\"\r\n        }),\r\n        $(go.TextBlock, \"Start\", {\r\n          font: \"bold 16pt helvetica, bold arial, sans-serif\",\r\n          stroke: \"whitesmoke\"\r\n        })\r\n      )\r\n    );\r\n\r\n    myDiagram.nodeTemplateMap.add(\r\n      \"End\",\r\n      $(\r\n        go.Node,\r\n        \"Spot\",\r\n        { desiredSize: new go.Size(75, 75) },\r\n        new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(\r\n          go.Point.stringify\r\n        ),\r\n        $(go.Shape, \"Circle\", {\r\n          fill: \"maroon\",\r\n          stroke: null,\r\n          portId: \"\",\r\n          fromLinkable: true,\r\n          fromLinkableSelfNode: true,\r\n          fromLinkableDuplicates: true,\r\n          toLinkable: true,\r\n          toLinkableSelfNode: true,\r\n          toLinkableDuplicates: true,\r\n          cursor: \"pointer\"\r\n        }),\r\n        $(go.Shape, \"Circle\", {\r\n          fill: null,\r\n          desiredSize: new go.Size(65, 65),\r\n          strokeWidth: 2,\r\n          stroke: \"whitesmoke\"\r\n        }),\r\n        $(go.TextBlock, \"End\", {\r\n          font: \"bold 16pt helvetica, bold arial, sans-serif\",\r\n          stroke: \"whitesmoke\"\r\n        })\r\n      )\r\n    );\r\n    // replace the default Link template in the linkTemplateMap\r\n    myDiagram.linkTemplate = $(\r\n      go.Link, // the whole link panel\r\n      {\r\n        curve: go.Link.Bezier,\r\n        adjusting: go.Link.Stretch,\r\n        reshapable: true,\r\n        relinkableFrom: true,\r\n        relinkableTo: true,\r\n        toShortLength: 3\r\n      },\r\n      new go.Binding(\"points\").makeTwoWay(),\r\n      new go.Binding(\"curviness\"),\r\n      $(\r\n        go.Shape, // the link shape\r\n        { strokeWidth: 1.5 },\r\n        new go.Binding(\"stroke\", \"progress\", (progress) =>\r\n          progress ? \"#52ce60\" /* green */ : \"black\"\r\n        ),\r\n        new go.Binding(\"strokeWidth\", \"progress\", (progress) =>\r\n          progress ? 2.5 : 1.5\r\n        )\r\n      ),\r\n      $(\r\n        go.Shape, // the arrowhead\r\n        { toArrow: \"standard\", stroke: null },\r\n        new go.Binding(\"fill\", \"progress\", (progress) =>\r\n          progress ? \"#52ce60\" /* green */ : \"black\"\r\n        )\r\n      ),\r\n      $(\r\n        go.Panel,\r\n        \"Auto\",\r\n        $(\r\n          go.Shape, // the label background, which becomes transparent around the edges\r\n          {\r\n            fill: $(go.Brush, \"Radial\", {\r\n              0: \"rgb(245, 245, 245)\",\r\n              0.7: \"rgb(245, 245, 245)\",\r\n              1: \"rgba(245, 245, 245, 0)\"\r\n            }),\r\n            stroke: null\r\n          }\r\n        ),\r\n        $(\r\n          go.TextBlock,\r\n          \"transition\", // the label text\r\n          {\r\n            textAlign: \"center\",\r\n            font: \"9pt helvetica, arial, sans-serif\",\r\n            margin: 4,\r\n            editable: true // enable in-place editing\r\n          },\r\n          // editing the text automatically updates the model data\r\n          new go.Binding(\"text\").makeTwoWay()\r\n        )\r\n      )\r\n    );\r\n\r\n    // myDiagram.model = loadDiagram();\r\n\r\n    console.log(\"-----------------\", myDiagram);\r\n    return myDiagram;\r\n  };\r\n\r\n  const initPalette = () => {\r\n    const $ = go.GraphObject.make;\r\n    const palette = $(go.Palette);\r\n    return palette;\r\n  };\r\n\r\n  const initOverview = () => {\r\n    const $ = go.GraphObject.make;\r\n    const overview = $(go.Overview, { contentAlignment: go.Spot.Center });\r\n    return overview;\r\n  };\r\n\r\n  return (\r\n    <div className=\"gojs-wrapper-div\">\r\n      <ReactPalette\r\n        initPalette={initPalette}\r\n        divClassName=\"palette-component\"\r\n        nodeDataArray={[{ key: 0, text: \"Alpha\" }]}\r\n      />\r\n      <ReactDiagram\r\n        ref={diagramRef}\r\n        divClassName=\"diagram-component\"\r\n        initDiagram={initDiagram}\r\n        nodeDataArray={props.nodeDataArray}\r\n        linkDataArray={props.linkDataArray}\r\n        modelData={props.modelData}\r\n        onModelChange={props.onModelChange}\r\n        skipsDiagramUpdate={props.skipsDiagramUpdate}\r\n      />\r\n      <ReactOverview\r\n        initOverview={initOverview}\r\n        divClassName=\"overview-component\"\r\n        observedDiagram={observed}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoJSWrapper;\r\n","/*\r\n *  Copyright (C) 1998-2019 by Northwoods Software Corporation. All Rights Reserved.\r\n */\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst InspectorRow = (props) => {\r\n  const [value, setValue] = useState(props.value);\r\n\r\n  const handleInputChange = (e) => {\r\n    props.onInputChange(props.id, e.target.value, e.type === \"blur\");\r\n  };\r\n\r\n  const formatLocation = (loc) => {\r\n    const locArr = loc.split(\" \");\r\n    if (locArr.length === 2) {\r\n      const x = parseFloat(locArr[0]);\r\n      const y = parseFloat(locArr[1]);\r\n      if (!isNaN(x) && !isNaN(y)) {\r\n        return `${x.toFixed(0)} ${y.toFixed(0)}`;\r\n      }\r\n    }\r\n    return loc;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let val = props.value;\r\n    if (props.id === \"loc\") {\r\n      val = formatLocation(props.value);\r\n    }\r\n    setValue(val);\r\n  }, [props.value, props.id]);\r\n\r\n  return (\r\n    <tr>\r\n      <td>{props.id}</td>\r\n      <td>\r\n        <input\r\n          disabled={props.id === \"key\"}\r\n          value={value}\r\n          onChange={handleInputChange}\r\n          onBlur={handleInputChange}\r\n        />\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default InspectorRow;\r\n","/*\r\n *  Copyright (C) 1998-2019 by Northwoods Software Corporation. All Rights Reserved.\r\n */\r\n\r\nimport * as React from \"react\";\r\n\r\nimport InspectorRow from \"./InspectorRow\";\r\n\r\nimport \"./SelectionInspector.css\";\r\n\r\nconst SelectionInspector = (props) => {\r\n  /**\r\n   * Render the object data, passing down property keys and values.\r\n   */\r\n  const renderObjectDetails = () => {\r\n    const selObj = props.selectedData;\r\n    const dets = [];\r\n    for (const k in selObj) {\r\n      const val = selObj[k];\r\n      const row = (\r\n        <InspectorRow\r\n          key={k}\r\n          id={k}\r\n          value={val}\r\n          onInputChange={props.onInputChange}\r\n        />\r\n      );\r\n      if (k === \"key\") {\r\n        dets.unshift(row); // key always at start\r\n      } else {\r\n        dets.push(row);\r\n      }\r\n    }\r\n    return dets;\r\n  };\r\n\r\n  return (\r\n    <div id=\"myInspectorDiv\" className=\"inspector\">\r\n      <table>\r\n        <tbody>{renderObjectDetails()}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectionInspector;\r\n","import * as go from \"gojs\";\r\nimport { produce } from \"immer\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\n\r\nimport GoJSWrapper from \"./components/GoJSWrapper\";\r\nimport SelectionInspector from \"./components/SelectionInspector\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const initialValue = {\r\n    nodeDataArray: [\r\n      { key: 0, text: \"Alpha\", color: \"lightblue\", loc: \"0 0\" },\r\n      { key: 1, text: \"Beta\", color: \"orange\", loc: \"150 0\" },\r\n      { key: 2, text: \"Gamma\", color: \"lightgreen\", loc: \"0 150\" },\r\n      { key: 3, text: \"Delta\", color: \"pink\", loc: \"150 150\" }\r\n    ],\r\n    linkDataArray: [\r\n      { key: -1, from: 0, to: 1 },\r\n      { key: -2, from: 0, to: 2 },\r\n      { key: -3, from: 1, to: 1 },\r\n      { key: -4, from: 2, to: 3 },\r\n      { key: -5, from: 3, to: 0 }\r\n    ],\r\n    modelData: {\r\n      canRelink: true\r\n    },\r\n    selectedData: null,\r\n    skipsDiagramUpdate: false\r\n  };\r\n\r\n  const [array, setArray] = useState(initialValue);\r\n  const [Inspector, setInspector] = useState();\r\n\r\n  const mapNodeKeyIdx = new Map();\r\n  const mapLinkKeyIdx = new Map();\r\n  refreshNodeIndex(array.nodeDataArray);\r\n  refreshLinkIndex(array.linkDataArray);\r\n\r\n  /**\r\n   * Update map of node keys to their index in the array.\r\n   */\r\n  function refreshNodeIndex(nodeArr) {\r\n    mapNodeKeyIdx.clear();\r\n    nodeArr.forEach((n, idx) => {\r\n      mapNodeKeyIdx.set(n.key, idx);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update map of link keys to their index in the array.\r\n   */\r\n  function refreshLinkIndex(linkArr) {\r\n    mapLinkKeyIdx.clear();\r\n    linkArr.forEach((l, idx) => {\r\n      mapLinkKeyIdx.set(l.key, idx);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle any relevant DiagramEvents, in this case just selection changes.\r\n   * On ChangedSelection, find the corresponding data and set the selectedData state.\r\n   * @param e a GoJS DiagramEvent\r\n   */\r\n  const handleDiagramChange = (e) => {\r\n    const name = e.name;\r\n    switch (name) {\r\n      case \"ChangedSelection\": {\r\n        const sel = e.subject.first();\r\n        setArray(\r\n          produce((draft) => {\r\n            if (sel) {\r\n              if (sel instanceof go.Node) {\r\n                const idx = mapNodeKeyIdx.get(sel.key);\r\n                if (idx !== undefined && idx >= 0) {\r\n                  const nd = draft.nodeDataArray[idx];\r\n                  draft.selectedData = nd;\r\n                }\r\n              } else if (sel instanceof go.Link) {\r\n                const idx = mapLinkKeyIdx.get(sel.key);\r\n                if (idx !== undefined && idx >= 0) {\r\n                  const ld = draft.linkDataArray[idx];\r\n                  draft.selectedData = ld;\r\n                }\r\n              }\r\n            } else {\r\n              draft.selectedData = null;\r\n            }\r\n          })\r\n        );\r\n        break;\r\n      }\r\n      case \"ExternalObjectsDropped\": {\r\n        const drop = e.subject.first();\r\n        alert(`Dropped key: ${drop.data.key}, text: ${drop.data.text}`);\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle GoJS model changes, which output an object of data changes via Model.toIncrementalData.\r\n   * This method iterates over those changes and updates state to keep in sync with the GoJS model.\r\n   * @param obj a JSON-formatted string\r\n   */\r\n  const handleModelChange = (obj) => {\r\n    if (obj === null) return;\r\n    const insertedNodeKeys = obj.insertedNodeKeys;\r\n    const modifiedNodeData = obj.modifiedNodeData;\r\n    const removedNodeKeys = obj.removedNodeKeys;\r\n    const insertedLinkKeys = obj.insertedLinkKeys;\r\n    const modifiedLinkData = obj.modifiedLinkData;\r\n    const removedLinkKeys = obj.removedLinkKeys;\r\n    const modifiedModelData = obj.modelData;\r\n\r\n    // maintain maps of modified data so insertions don't need slow lookups\r\n    const modifiedNodeMap = new Map();\r\n    const modifiedLinkMap = new Map();\r\n\r\n    setArray(\r\n      produce((draft) => {\r\n        let narr = draft.nodeDataArray;\r\n        if (modifiedNodeData) {\r\n          modifiedNodeData.forEach((nd) => {\r\n            modifiedNodeMap.set(nd.key, nd);\r\n            const idx = mapNodeKeyIdx.get(nd.key);\r\n            console.log(\"nodeKey\", idx, nd);\r\n            if (idx !== undefined && idx >= 0) {\r\n              narr[idx] = nd;\r\n              if (draft.selectedData && draft.selectedData.key === nd.key) {\r\n                draft.selectedData = nd;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (insertedNodeKeys) {\r\n          insertedNodeKeys.forEach((key) => {\r\n            const nd = modifiedNodeMap.get(key);\r\n            const idx = mapNodeKeyIdx.get(key);\r\n            console.log(\"nodeKey\", idx, nd);\r\n            if (nd && idx === undefined) {\r\n              mapNodeKeyIdx.set(nd.key, narr.length);\r\n              narr.push(nd);\r\n            }\r\n          });\r\n        }\r\n        if (removedNodeKeys) {\r\n          narr = narr.filter((nd) => {\r\n            if (removedNodeKeys.includes(nd.key)) {\r\n              return false;\r\n            }\r\n            return true;\r\n          });\r\n          draft.nodeDataArray = narr;\r\n          refreshNodeIndex(narr);\r\n        }\r\n\r\n        let larr = draft.linkDataArray;\r\n        if (modifiedLinkData) {\r\n          modifiedLinkData.forEach((ld) => {\r\n            modifiedLinkMap.set(ld.key, ld);\r\n            const idx = mapLinkKeyIdx.get(ld.key);\r\n            console.log(\"linkKey\", idx);\r\n            if (idx !== undefined && idx >= 0) {\r\n              larr[idx] = ld;\r\n              if (draft.selectedData && draft.selectedData.key === ld.key) {\r\n                draft.selectedData = ld;\r\n              }\r\n            }\r\n          });\r\n        }\r\n        if (insertedLinkKeys) {\r\n          insertedLinkKeys.forEach((key) => {\r\n            const ld = modifiedLinkMap.get(key);\r\n            const idx = mapLinkKeyIdx.get(key);\r\n            console.log(\"linkKey\", idx);\r\n            if (ld && idx === undefined) {\r\n              mapLinkKeyIdx.set(ld.key, larr.length);\r\n              larr.push(ld);\r\n            }\r\n          });\r\n        }\r\n        if (removedLinkKeys) {\r\n          larr = larr.filter((ld) => {\r\n            if (removedLinkKeys.includes(ld.key)) {\r\n              return false;\r\n            }\r\n            return true;\r\n          });\r\n          draft.linkDataArray = larr;\r\n          refreshLinkIndex(larr);\r\n        }\r\n        // handle model data changes, for now just replacing with the supplied object\r\n        if (modifiedModelData) {\r\n          draft.modelData = modifiedModelData;\r\n        }\r\n        draft.skipsDiagramUpdate = true; // the GoJS model already knows about these updates\r\n      })\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Handle inspector changes, and on input field blurs, update node/link data state.\r\n   * @param path the path to the property being modified\r\n   * @param value the new value of that property\r\n   * @param isBlur whether the input event was a blur, indicating the edit is complete\r\n   */\r\n  const handleInputChange = useCallback(\r\n    (path, value, isBlur) => {\r\n      setArray(\r\n        produce((draft) => {\r\n          const data = draft.selectedData; // only reached if selectedData isn't null\r\n          data[path] = value;\r\n          if (isBlur) {\r\n            const key = data.key;\r\n            if (key < 0) {\r\n              // negative keys are links\r\n              const idx = mapLinkKeyIdx.get(key);\r\n              if (idx !== undefined && idx >= 0) {\r\n                draft.linkDataArray[idx] = data;\r\n                draft.skipsDiagramUpdate = false;\r\n              }\r\n            } else {\r\n              const idx = mapNodeKeyIdx.get(key);\r\n              if (idx !== undefined && idx >= 0) {\r\n                draft.nodeDataArray[idx] = data;\r\n                draft.skipsDiagramUpdate = false;\r\n              }\r\n            }\r\n          }\r\n        })\r\n      );\r\n    },\r\n    [mapLinkKeyIdx, mapNodeKeyIdx]\r\n  );\r\n\r\n  /**\r\n   * Handle changes to the checkbox on whether to allow relinking.\r\n   * @param e a change event from the checkbox\r\n   */\r\n  const handleRelinkChange = (e) => {\r\n    const target = e.target;\r\n    const value = target.checked;\r\n    setArray({\r\n      modelData: { canRelink: value },\r\n      skipsDiagramUpdate: false\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const selectedData = array.selectedData;\r\n    let inspector;\r\n    if (selectedData !== null) {\r\n      inspector = (\r\n        <SelectionInspector\r\n          selectedData={array.selectedData}\r\n          onInputChange={handleInputChange}\r\n        />\r\n      );\r\n      setInspector(inspector);\r\n    }\r\n  }, [array.selectedData, handleInputChange]);\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        Try moving around nodes, editing text, relinking, undoing (Ctrl-Z), etc.\r\n        within the diagram and you'll notice the changes are reflected in the\r\n        inspector area. You'll also notice that changes made in the inspector\r\n        are reflected in the diagram. If you use the React dev tools, you can\r\n        inspect the React state and see it updated as changes happen.\r\n      </p>\r\n      <p>\r\n        Check out the{\" \"}\r\n        <a\r\n          href=\"https://gojs.net/alpha/intro/react.html\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Intro page on using GoJS with React\r\n        </a>{\" \"}\r\n        for more information.\r\n      </p>\r\n      <GoJSWrapper\r\n        nodeDataArray={array.nodeDataArray}\r\n        linkDataArray={array.linkDataArray}\r\n        modelData={array.modelData}\r\n        skipsDiagramUpdate={array.skipsDiagramUpdate}\r\n        onDiagramChange={handleDiagramChange}\r\n        onModelChange={handleModelChange}\r\n      />\r\n      <label>\r\n        Allow Relinking?\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"relink\"\r\n          checked={array.modelData.canRelink}\r\n          onChange={handleRelinkChange}\r\n        />\r\n      </label>\r\n      {Inspector}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}